'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Game = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _helpers = require('./helpers');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Game, reduce;

exports.Game = Game = function () {
  function Game() {
    _classCallCheck(this, Game);

    this.state = {
      dice: '',
      points: 0,
      win: false,
      lose: false
    };
    this.history = [];
  }

  _createClass(Game, [{
    key: 'dispatch',
    value: function dispatch(action) {
      var state;
      state = reduce(this.state, action);
      this.history.push([action.type, state]);
      return this.state = state;
    }
  }]);

  return Game;
}();

reduce = function reduce(state, action) {
  var points, ref, ref1, ref2, ref3, ref4, ref5, update;
  update = function update(obj) {
    return Object.assign({}, state, obj);
  };
  switch (action.type) {
    case 'win':
      return update({
        win: true
      });
    case 'lose':
      return update({
        lose: true
      });
    case 'flash':
      return update({
        dice: state.dice.replace(action.matcher, '')
      });
    case 'quit':
      return update({
        dice: ''
      });
    case 'points':
      return update({
        points: state.points + action.payload.amount
      });
    case 'roll dice':
      return update({
        dice: (0, _helpers.rollMany)(action.payload.times)
      });
    case 'sum remaining':
      points = 0;
      points += (ref = ((ref1 = state.dice.match(/5/g)) != null ? ref1.length : void 0) * 5) != null ? ref : 0;
      points += (ref2 = ((ref3 = state.dice.match(/1/g)) != null ? ref3.length : void 0) * 10) != null ? ref2 : 0;
      points += (ref4 = ((ref5 = state.dice.match(/\?/g)) != null ? ref5.length : void 0) * 10) != null ? ref4 : 0;
      return update({
        points: points,
        dice: state.dice.replace(/[15?]/g, '')
      });
  }
};

exports.Game = Game;